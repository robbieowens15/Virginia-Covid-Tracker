import csv
import os
from pathlib import Path
from datetime import date

#TAGS (Constants) from csv file:
DATE = "Report Date"
FIPS = "FIPS"
LOCALITY = "Locality"
DISTRICT = "VDH Health District"
TOTAL_CASES = "Total Cases"
TOTAL_HOSPITALIZATIONS = "Hospitalizations"
TOTAL_DEATHS = "Deaths"

#Global Varribles
tracking_loalities = [] #Will hold a locality objects indexed as a list

#Locality object (to store data for each area more easily)
class Locality:
    def __init__(self, name):
        self.name=name #stores the name of the locality
    data_list = [] #stores one day of data in each index of the list. Sorted by index
    #! index 0 is 3/17/2020 (first data), index -1 is most current data

    #tosting
    def __str__(self):
        print(self.name +':\n')
        for i in range (len(self.data_list)):
            index = str(i)
            date = self.data_list[i][DATE]
            locality = self.data_list[i][LOCALITY]
            total_cases = self.data_list[i][TOTAL_CASES]
            total_hospitalizations = self.data_list[i][TOTAL_HOSPITALIZATIONS]
            total_deaths = self.data_list[i][TOTAL_DEATHS]
            print((f'(index:{index})\t'
            + f'date:{date}\t'
            + f'locality: {locality}\t'
            + f'total_cases: {total_cases}\t'
            + f'total_hospitalizations: {total_hospitalizations}\t'
            + f'total_deaths: {total_deaths}\n'))


#Function to create the global list (tracking_loalities) localities to be tracked
def create_localities(list):
    for locality_name in list:
        tracking_loalities.insert(0, Locality(locality_name))


#This function retirives the data from the CSV file and adds the data for each localities to its objects data_list
def read_data():
    data_dir = Path(str(os.path.dirname(__file__))+'/CSVs')
    file_path = data_dir / f'{date.today().isoformat()}.csv' #todays data
    with open(file_path, 'r') as csv_file:
        csv_reader = csv.DictReader(csv_file)

        for line in csv_reader: #Vist each line
            for locality in tracking_loalities: #Vist each locality
                if(line[LOCALITY] == locality.name): #If line is about a locality to be tracked, record the
                    #oredered dictonary (line) to the locality objects data_list
                    locality.data_list.insert(0, line) #Data will be in date order, newest at the bottom


def print_raw_data_by_locality_then_year():
    for locality in tracking_loalities:
        print(locality)
    

example_localities = ["Fairfax", "Loudoun", "Albemarle"] #todo Temporary, list will be generated by email list
create_localities(example_localities)
read_data()
print_raw_data_by_locality_then_year()
